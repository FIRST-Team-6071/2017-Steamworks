// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6071.BCCFRCROBOT;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Spark driveTrainFrontLeft;
    public static SpeedController driveTrainBackLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainBackRight;
    public static RobotDrive driveTrainDriveTrain;
    public static SpeedController clawArmClawMotor;
     public static SpeedController launcherLauncherMotor; // HEREPAYATTEMTIONTO ME!!!!!!!!!!
     public static SpeedController launcherLauncherMotorTwo;
    public static SpeedController clawGripGripMotor;
    public static SpeedController climberClimberOne;
    public static SpeedController climberClimberTwo;
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeft = new Spark(0);
        LiveWindow.addActuator("Drive Train", "Front Left", (Spark) driveTrainFrontLeft);
        
        driveTrainBackLeft = new Spark(1);
        LiveWindow.addActuator("Drive Train", "Back Left", (Spark) driveTrainBackLeft);
        
        driveTrainFrontRight = new Spark(2);
        LiveWindow.addActuator("Drive Train", "Front Right", (Spark) driveTrainFrontRight);
        
        driveTrainBackRight = new Spark(3);
        LiveWindow.addActuator("Drive Train", "Back Right", (Spark) driveTrainBackRight);
        
        driveTrainDriveTrain = new RobotDrive(driveTrainFrontLeft, driveTrainBackLeft,
              driveTrainFrontRight, driveTrainBackRight);
        
        driveTrainDriveTrain.setSafetyEnabled(true);
        driveTrainDriveTrain.setExpiration(0.1);
        driveTrainDriveTrain.setSensitivity(0.5);
        driveTrainDriveTrain.setMaxOutput(1.0);
		
        clawArmClawMotor = new Spark(4);
        LiveWindow.addActuator("Claw Arm", "ClawMotor", (Spark) clawArmClawMotor);
        
        //climberClimberOne = new Spark(6);
        //LiveWindow.addActuator("Climb Arm", "ClimbMotor", (Spark) climberClimberOne);
      //  climberClimberTwo = new Spark(7);
        //LiveWindow.addActuator("Climb Arm Two", "ClimbMotorTwo", (Spark) climberClimberTwo);
         launcherLauncherMotor = new Spark(6);
         LiveWindow.addActuator("Launcher", "LauncherMotor", (Spark) launcherLauncherMotor);
         launcherLauncherMotorTwo = new Spark(7);
         LiveWindow.addActuator("Launcher", "LauncherMotor", (Spark) launcherLauncherMotor);
        
        
        
        clawGripGripMotor = new Talon(5);
        LiveWindow.addActuator("Claw Grip", "GripMotor", (Talon) clawGripGripMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
