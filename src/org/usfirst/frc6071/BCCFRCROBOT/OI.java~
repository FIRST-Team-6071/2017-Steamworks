// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6071.BCCFRCROBOT;

import org.usfirst.frc6071.BCCFRCROBOT.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6071.BCCFRCROBOT.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton clawLower;
    public JoystickButton clawRaise;
    public JoystickButton clawClose;
    public JoystickButton clawOpen;
    public JoystickButton launcherStart;
    public JoystickButton launcherStop;
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public Joystick xboxJoy;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxJoy = new Joystick(0);
        
        joystickButton2 = new JoystickButton(xboxJoy, 1);
        joystickButton2.whileHeld(new ExpandClaw());
        joystickButton1 = new JoystickButton(xboxJoy, 7);
        joystickButton1.whileHeld(new ExpandClaw());
        launcherStop = new JoystickButton(xboxJoy, 6);
        launcherStop.whileHeld(new StopLaunch());
        launcherStart = new JoystickButton(xboxJoy, 5);
        launcherStart.whileHeld(new StartLaunch());
        clawOpen = new JoystickButton(xboxJoy, 4);
        clawOpen.whileHeld(new OpenClaw());
        clawClose = new JoystickButton(xboxJoy, 3);
        clawClose.whileHeld(new CloseClaw());
        clawRaise = new JoystickButton(xboxJoy, 2);
        clawRaise.whileHeld(new RaiseClaw());
        clawLower = new JoystickButton(xboxJoy, 1);
        clawLower.whileHeld(new LowClaw());


        // SmartDashboard Buttons
        SmartDashboard.putData("LowClaw", new LowClaw());
        SmartDashboard.putData("RaiseClaw", new RaiseClaw());
        SmartDashboard.putData("Close Claw", new CloseClaw());
        SmartDashboard.putData("Open Claw", new OpenClaw());
        SmartDashboard.putData("Start Launch", new StartLaunch());
        SmartDashboard.putData("Stop Launch", new StopLaunch());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Joystick Values", new JoystickValues());
        SmartDashboard.putData("Expand Claw", new ExpandClaw());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXboxJoy() {
        return xboxJoy;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

